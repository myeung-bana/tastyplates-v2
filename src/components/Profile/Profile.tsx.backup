"use client";
import React, { useState, useEffect } from "react";
import { Tab, Tabs } from "@heroui/tabs";
import { useSession } from "next-auth/react";
import toast from "react-hot-toast";
import { WELCOME_KEY } from "@/constants/session";

// Import our new components and hooks
import ProfileHeader from "./ProfileHeader";
import ReviewsTab from "./ReviewsTab";
import ListingsTab from "./ListingsTab";
import WishlistsTab from "./WishlistsTab";
import CheckinsTab from "./CheckinsTab";
import FollowersModal, { Follower } from "./FollowersModal";
import FollowingModal from "./FollowingModal";
import { useFollowData } from "@/hooks/useFollowData";
import { useProfileData } from "@/hooks/useProfileData";

interface ProfileProps {
  targetUserId: number;
}

const Profile = ({ targetUserId }: ProfileProps) => {
  const { data: session, status } = useSession();
  const [showFollowers, setShowFollowers] = useState(false);
  const [showFollowing, setShowFollowing] = useState(false);

  // Use our custom hooks
  const {
    userData,
    nameLoading,
    aboutMeLoading,
    palatesLoading,
    loading,
    isViewingOwnProfile
  } = useProfileData(targetUserId);

  const {
    followers,
    following,
    followersLoading,
    followingLoading,
    handleFollow,
    handleUnfollow
  } = useFollowData(targetUserId);

  // Welcome message effect
  useEffect(() => {
    const welcomeMessage = localStorage?.getItem(WELCOME_KEY) ?? "";
    if (welcomeMessage) {
      toast.success(welcomeMessage, {
        duration: 3000,
      });
      localStorage.removeItem(WELCOME_KEY);
    }
  }, []);

  // Tab configuration
  const tabs = [
    {
      id: "reviews",
      label: "Reviews",
      content: <ReviewsTab targetUserId={targetUserId} status={status} />
    },
    {
      id: "listings",
      label: "Listings",
      content: <ListingsTab targetUserId={targetUserId} isViewingOwnProfile={isViewingOwnProfile} />
    },
    {
      id: "wishlists",
      label: "Wishlists",
      content: <WishlistsTab targetUserId={targetUserId} isViewingOwnProfile={isViewingOwnProfile} />
    },
    {
      id: "checkins",
      label: "Check-ins",
      content: <CheckinsTab targetUserId={targetUserId} isViewingOwnProfile={isViewingOwnProfile} />
    }
  ];

  return (
    <div className="w-full min-h-screen bg-white">
      <ProfileHeader
        userData={userData}
        nameLoading={nameLoading}
        aboutMeLoading={aboutMeLoading}
        palatesLoading={palatesLoading}
        userReviewCount={0} // This will be handled by ReviewsTab
        followers={followers}
        following={following}
        followersLoading={followersLoading}
        followingLoading={followingLoading}
        isViewingOwnProfile={isViewingOwnProfile}
        onShowFollowers={() => setShowFollowers(true)}
        onShowFollowing={() => setShowFollowing(true)}
        onFollow={handleFollow}
        onUnfollow={handleUnfollow}
        session={session}
      />

      <FollowersModal
        open={showFollowers}
        onClose={() => setShowFollowers(false)}
        followers={followers as unknown as Follower[]}
        onFollow={handleFollow}
        onUnfollow={handleUnfollow}
      />

      <FollowingModal
        open={showFollowing}
        onClose={() => setShowFollowing(false)}
        following={following as unknown as Follower[]}
        onUnfollow={handleUnfollow}
        onFollow={handleFollow}
      />

      {/* Centered Tabs Container */}
      <div className="w-full max-w-4xl mx-auto px-4">
        <Tabs
          aria-label="Dynamic tabs"
          items={tabs}
          classNames={{
            tabWrapper: "w-full",
            base: "w-full border-b justify-center min-w-max sm:min-w-0 px-0",
            panel: "py-0 px-0 justify-start w-full",
            tabList: "gap-0 md:gap-4 w-fit relative rounded-none p-0 flex no-scrollbar sm:overflow-x-hidden",
            cursor: "w-full bg-[#31343F]",
            tab: "px-4 sm:px-6 py-3 h-[44px] font-semibold font-inter whitespace-nowrap",
            tabContent: "group-data-[selected=true]:text-[#31343F] text-xs sm:text-base font-semibold",
          }}
          variant="underlined"
        >
          {(item) => (
            <Tab key={item.id} title={item.label}>
              <div className="bg-none rounded-none">
                {item.content}
              </div>
            </Tab>
          )}
        </Tabs>
      </div>
    </div>
  );
};

export default Profile;