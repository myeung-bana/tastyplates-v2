import { useState, useEffect, useMemo, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { UserService } from '@/services/user/userService';

interface UseProfileDataReturn {
  userData: Record<string, unknown> | null;
  nameLoading: boolean;
  aboutMeLoading: boolean;
  palatesLoading: boolean;
  loading: boolean;
  isViewingOwnProfile: boolean;
}

export const useProfileData = (targetUserId: number): UseProfileDataReturn => {
  const { data: session, status } = useSession();
  const [userData, setUserData] = useState<Record<string, unknown> | null>(null);
  const [nameLoading, setNameLoading] = useState(true);
  const [aboutMeLoading, setAboutMeLoading] = useState(true);
  const [palatesLoading, setPalatesLoading] = useState(true);
  const [loading, setLoading] = useState(true);

  const userService = useRef(new UserService()).current;

  const isViewingOwnProfile = useMemo(() => {
    return Number(session?.user?.id) === targetUserId;
  }, [session?.user?.id, targetUserId]);

  useEffect(() => {
    const fetchPublicUserData = async () => {
      setNameLoading(true);
      setAboutMeLoading(true);
      setPalatesLoading(true);
      
      try {
        const publicUser = await userService.getUserById(targetUserId);
        setUserData(publicUser);
      } catch (error) {
        console.error("Error fetching public user data:", error);
        setUserData(null);
      } finally {
        setNameLoading(false);
        setAboutMeLoading(false);
        setPalatesLoading(false);
        setLoading(false);
      }
    };

    if (targetUserId && !isViewingOwnProfile) {
      fetchPublicUserData();
    } else {
      setUserData(null);
      setNameLoading(false);
      setAboutMeLoading(false);
      setPalatesLoading(false);
      setLoading(false);
    }
  }, [targetUserId, isViewingOwnProfile]);

  useEffect(() => {
    // Set userData from session.user if viewing own profile
    if (isViewingOwnProfile && session?.user) {
      setUserData(session.user);
      setNameLoading(false);
      setAboutMeLoading(false);
      setPalatesLoading(false);
    }
  }, [isViewingOwnProfile, session?.user]);

  return {
    userData,
    nameLoading,
    aboutMeLoading,
    palatesLoading,
    loading,
    isViewingOwnProfile
  };
};
